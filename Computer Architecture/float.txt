/* 
 * File:   main.c
 * Author: Sina Radmehr
 * Note: This file works as a test
 * Created on December 9, 2017, 4:14 PM
 */
#include <stdio.h>
#include <regex.h>
#include "mcc_generated_files/mcc.h"
#include "mcc_generated_files/lcd.h"

#define A      LATA
#define A0     LATAbits.LATA0
#define A1     LATAbits.LATA1
#define A2     LATAbits.LATA2
#define A3     LATAbits.LATA3

#define B12     LATBbits.LATB0
#define B13     LATBbits.LATB1
#define B14     LATBbits.LATB2
#define B15     LATBbits.LATB3

uint8_t read_keypad(uint32_t *A_pos, uint32_t *B);
uint8_t debouncing(uint32_t A_pos, uint32_t B);
char decode_keypad(uint32_t A_pos, uint32_t B);
uint8_t leave_keypad(uint32_t A_pos, uint32_t B);
void shift_queue(int i);
uint8_t precedence(uint8_t o1, uint8_t o2);
int8_t multi_digit(int i);
void modify_input();
int8_t claculation();
int8_t create_command();
void clear_input();

uint8_t input[16], input_help[16], modified_input[17],modified_input_help[17], command_help[16], queue_help[16];
uint8_t Error = 0;
int q=0;
int s=0;
int len = 0;
int command_len = 0;
float command[16], queue[16], stack[16];
uint8_t result_array[17];
uint8_t result_len=0;
uint8_t result_len_int = 0;
float details[16];
int len_multi=0;
float read_number=0;
int main(void)
{
    // initialize the device
    // Use ctrl+click to see inside of the functions
    SYSTEM_Initialize();
    LCD_Initialize();
    // remember to clear lcd before first usage
    LCDClear();
    ANSELA = 0x0000;
    ANSELB = 0x0000;
    TRISA = 0x0000;
    TRISB = 0xF000;
  
    uint32_t A_pos = 1;
    uint32_t B = 1;
    uint8_t check_debouncing = 0;
    uint8_t check_read,check_leave;
    uint8_t number = 'e';
    uint8_t opcode = 0;
    char symbol = '0';
    int col = 0;
    uint8_t temp = 0;
    clear_input();
    while(1){
        LCDPutCmd(LCD_HOME);
        check_read = 0;
        opcode = 0;
        while(check_read == 0){
            check_read = read_keypad(&A_pos, &B);
//            if(check_read == 1)
//                check_debouncing = debouncing(A_pos,B);
        }
        if(col<=16){
            A_pos = A_pos >> 1;
            if(B==1)
                switch(A_pos){
                        case 1 : 
                            number = '1';
                            input_help[col] = 'n';
                            break;
                        case 2 : 
                            number = '2';
                            input_help[col] = 'n';
                            break;
                        case 4 : 
                            number = '3';
                            input_help[col] = 'n';
                            break;
                        case 8 : 
                            number = '+';
                            input_help[col] = 'o';
                            break;
                        case 16 : 
                            number = '-';
                            input_help[col] = 'o';
                            break;
                    }
            else if(B==2){
                switch(A_pos){
                        case 1 : 
                            number = '4';
                            input_help[col] = 'n';
                            break;
                        case 2 : 
                            number = '5';
                            input_help[col] = 'n';
                            break;
                        case 4 : 
                            number = '6';
                            input_help[col] = 'n';
                            break;
                        case 8 : 
                            number = '*';
                            input_help[col] = 'o';
                            break;
                        case 16 : 
                            number = '/';
                            input_help[col] = 'o';
                            break;
                    }
            }
            else if(B==4){
                switch(A_pos){
                        case 1 : 
                            number = '7';
                            input_help[col] = 'n';
                            break;
                        case 2 : 
                            number = '8';
                            input_help[col] = 'n';
                            break;
                        case 4 : 
                            number = '9';
                            input_help[col] = 'n';
                            break;
                        case 8 : 
                            number = '.';
                            input_help[col] = '.';
                            break;
                        case 16 : 
                            opcode = 2; // clear LCD
                            break;
                }   
                    }
            else if(B==8){
                switch(A_pos){
                        case 1 : 
                            number = '(';
                            input_help[col] = '(';
                            break;
                        case 2 : 
                            number = '0';
                            input_help[col] = 'n';
                            break;
                        case 4 : 
                            number = ')';
                            input_help[col] = ')';
                            break;
                        case 8 : 
                            opcode = 1; // do nothing
                            break;    
                        case 16 : 
                            opcode = 3; // show result
                            break;
                    }
            }
            while(leave_keypad(A_pos,B) == 0){
            }
            if(opcode == 0){
                input[col] = number;
                LCDGoto(col,0);
                LCDPutChar(number);
                col++;
            }
            else if(opcode == 2){
                LCDClear();
                clear_input();
                col = 0;
            } else if(opcode == 3){
                modify_input();
//                LCDClear();
//                for (int k=1;k<len;k++){
//                    LCDGoto(k,1);
//                    LCDPutChar(modified_input[k]);
//                }
               // if(create_command()==1){
               // command_len = 3;
//                command[0] = 1;command_help[0] = 'n';
//                command[1] = 10; command_help[1] = 'o';
//                command[2] = 2; command_help[2] = 'n';
             //---------------------------------------------
//                 if(create_command()==1){
//                    if(claculation()==1){
//                        col = 0;
//                            
//                        for(int k=0;k<q;k++){
//                            LCDGoto(col,1);
//                            if(queue[k]==10){
//                                LCDPutChar('+');
//                                col++;
//                            } else if(queue[k]==11){
//                                LCDPutChar('-');
//                                col++;
//                            } 
//                            else if(queue[k]==12){
//                                LCDPutChar('*');
//                                col++;
//                            }
//                            else if(queue[k]==13){
//                                LCDPutChar('/');
//                                col++;
//                            } else{
//                                temp = '0' + queue[k];
//                                LCDPutChar(temp);
//                                col++;
//                            }  
//                                //else{
////                                LCDClear();
////                                clear_input();
////                                LCDGoto(0,1);
////                                LCDPutStr("Syntax Error");
////                                col = 0;
////                                break;
////                                }
//                                
//                        }
//                        clear_input();
//                        col = 0;
//                    } else{
//                        LCDClear();
//                        clear_input();
//                        LCDGoto(0,1);
//                        LCDPutStr("Syntax Error");
//                        col = 0;
//                    }
//                    } else{
//                        LCDClear();
//                        clear_input();
//                        LCDGoto(0,1);
//                        LCDPutStr("Syntax Error");
//                        col = 0;
//                    }
                
                
                
                
                
        // ----------------------------------------------        
                if(create_command()==1){
                    if(claculation()==1){
                        col = 0;
                        if(result_array[16]==1){
                            LCDGoto(col,1);
                            LCDPutChar('-');
                            col++;
                        }
                            
                        for(int k=result_len_int-1;k>=0;k--){
                            LCDGoto(col,1);
                            if(result_array[k]>=0 && result_array[k]<10){
                                temp = '0' + result_array[k];
                                LCDPutChar(temp);
                                col++;
                            }
                            else{
                                LCDClear();
                                clear_input();
                                LCDGoto(0,1);
                                LCDPutStr("Syntax Error");
                                col = 0;
                                break;
                            }
                        }
                        if(result_len != result_len_int){
                            LCDGoto(col,1);
                            LCDPutChar('.');
                            col++;
                            for(int k=result_len_int;k<result_len;k++){
                                LCDGoto(col,1);
                                if(result_array[k]>=0 && result_array[k]<10){
                                    temp = '0' + result_array[k];
                                    LCDPutChar(temp);
                                    col++;
                                }
                                else{
                                    LCDClear();
                                    clear_input();
                                    LCDGoto(0,1);
                                    LCDPutStr("Syntax Error");
                                    col = 0;
                                    break;
                                }
                            }
                        }
                        clear_input();
                        col = 0;
                    } else{
                        LCDClear();
                        clear_input();
                        LCDGoto(0,1);
                        LCDPutStr("Syntax Error");
                        col = 0;
                    }
                    } else{
                        LCDClear();
                        clear_input();
                        LCDGoto(0,1);
                        LCDPutStr("Syntax Error");
                        col = 0;
                    }
            }
//            else{
//                LCDClear();
//                clear_input();
//                LCDGoto(0,1);
//                LCDPutStr("Syntax Error");
//                col = 0;
//            }
            }
        else if(col>16){
            LCDClear();
            clear_input();
            LCDGoto(0,1);
            LCDPutStr("Syntax Error");
            col = 0;
        }
        
    }
//    while (1)
//    {
//        LCDPutCmd(LCD_HOME);
//        LCDGoto(i,0);
//        LCDPutChar('0'+i);
//        __delay_ms(500);
//        i++;
//        // Add your application code
//        if(i==10){
//            i=0;
//            LCDGoto(0,1);
//            LCDPutStr("<<Hello World!>>");
//            __delay_ms(500);
//            LCDClear();
//        }
//    }

    return -1;
}

uint8_t debouncing(uint32_t A_pos, uint32_t B){
    uint32_t temp;
    for (int i=0;i<5;i++){
        LATA = A_pos;
        temp = PORTB;
        temp = temp >> 12;
        if(temp == 0)
            return 0;
    }
    return 1;
}

uint8_t read_keypad(uint32_t *A_pos, uint32_t *B){
    *A_pos = 1;
    for(int i=0; i<=5;i++){
        LATA = *A_pos;
        *B = PORTB;
        *B = *B >> 12;
        if(*B != 0){
//            check = debouncing(*A_pos, *B);
//            if(check == 1)
                return 1;
        }
        *A_pos = *A_pos << 1;
    }
    return 0;
}
uint8_t leave_keypad(uint32_t A_pos, uint32_t B){
    A_pos = 1;
    for(int i=0; i<=5;i++){
        LATA = A_pos;
        B = PORTB;
        B = B >> 12;
        if(B != 0){
                return 0;
        }
        A_pos = A_pos << 1;
    }
    return 1;
}

void clear_input(){
    for (int i=0;i<16;i++){
        input[i] = 'f';
        input_help[i] = 'f';
        modified_input[i]='f';
        command_help[i] = 'f';
        command[i] = 0;
        queue[i] = 0;
        stack[i] = 0;
        queue_help[i] = 'f';
    }
    q = 0;
    s = 0;
}

uint8_t precedence(uint8_t o1, uint8_t o2){
    if ((o1==10 || o1==11) && (o2==12 || o2==13))
        return 0;
    return 1;
}

void modify_input(){
    uint8_t length = 0;
    modified_input[0] = '*';
    modified_input_help[0] = 'o';
    len = 1;
    while(input[length]!= 'f'){
        length++;
    }
    uint8_t minus_num=0;
    int i = 0;
    while(i<length){
        if(input[i]=='-' || input[i]=='+'){
            while(input[i]=='-' || input[i]=='+'){
                if(input[i]=='-')
                    minus_num++;
                i++;
            }
            if (minus_num % 2 == 0)
                modified_input[len] = '+';
            else
                modified_input[len] = '-';
            minus_num = 0;
            modified_input_help[len] = 'o';
        }
        else{
            modified_input[len] = input[i];
            modified_input_help[len] = input_help[i];
            
            i++;
        }
        len++;
    }
}
int8_t multi_digit(int i){
    float number_int=0;
    float number_float=0;
    int8_t digits[len];
    int j = 0;
    len_multi = 0;
    while(i+len_multi<len && modified_input_help[i+len_multi]=='n'){
        number_int = number_int*10 + modified_input[i+len_multi] - '0';
        len_multi++;
    }
    if(i+len_multi<len && modified_input_help[i+len_multi]=='.'){
        if(i+len_multi+1>=len || modified_input_help[i+len_multi+1]!='n')
            return -1;
        len_multi++;
        while(i+len_multi<len && modified_input_help[i+len_multi]=='n'){
            digits[j] = modified_input[i+len_multi] - '0';
            j++;
            number_float  = number_float*10 + modified_input[i+len_multi] - '0';
            len_multi++;
        }
        for(int k=j-1;k>=0;k--){
            number_float  = number_float/10 + digits[k];
        }
    }
    read_number = number_int + number_float/10;
    return 1;
}

int8_t create_command(){
    int j=0;
    int i=1;
    while(i<len){
        if((modified_input[i]=='+' || modified_input[i]=='-') && (modified_input[i-1]=='*' || modified_input[i-1]=='/' || modified_input[i-1]=='(')){
            if(modified_input_help[i+1]=='n'){
                if(multi_digit(i+1) == -1)
                    return -1;
                if(modified_input[i]=='+'){
                    //command[j] = modified_input[i+1] - '0';
                    command[j] = read_number;
                } else{
                    //command[j] = -(modified_input[i+1] - '0');
                    command[j] = -read_number;
                }
                i = i+len_multi+1;
                command_help[j] = 'n';
                j++;
            } else{
                return -1;
            }
        }
        else{
            switch(modified_input[i]){
                case '+':
                    command[j] = 10;
                    command_help[j] = 'o';
                    break;
                case '-':
                    command[j] = 11;
                    command_help[j] = 'o';
                    break;
                case '*':
                    command[j] = 12;
                    command_help[j] = 'o';
                    break;
                case '/':
                    command[j] = 13;
                    command_help[j] = 'o';
                    break;
                case '(':
                    command[j] = 14;
                    command_help[j] = '(';
                    break;
                case ')':
                    command[j] = 15;
                    command_help[j] = ')';
                    break;
                default:
                    //command[j] = modified_input[i]-'0';
                    if(multi_digit(i) == -1)
                        return -1;
                    command[j] = read_number;
                    i = i + len_multi-1;
                    command_help[j] = 'n';
                    break;
            }
            i++;
            j++;
        }  
    }
    command_len = j;
    return 1;
}
void shift_queue(int i){
    for (int j=i+3;j<q;j++){
        details[j-2] = details[j]; 
    }
    q -= 2;
}
int8_t claculation(){
    int8_t length = command_len;
    q = 0;
    s = 0;
    int i = 0;
    while(i<command_len){
        if(command_help[i]=='n'){
            queue[q] = command[i];
            queue_help[q] = 'n';
            q++;
        } else if(command_help[i]=='o'){
            while(s!=0 && stack[s-1]!= 14 && precedence(command[i],stack[s-1])==0){
                queue[q] = stack[s-1];
                queue_help[q] = 'o';
                q++;
                s--;
            }
            stack[s] = command[i];
            s++;
        } else if(command_help[i] == '('){
            stack[s] = command[i];
            s++;
        } else if(command_help[i] == ')'){
            if(s>0){
                while(stack[s-1]!=14){
                    queue[q] = stack[s-1];
                    queue_help[q] = 'o';
                    q++;
                    s--;
                    if(s==0){
                        return -1;
                    }
                }
                s--;
            } else{
                return -1;
            }
        }  
        i++;
    }
    for (int j=s-1;j>=0;j--){
        if(stack[j]==14){
            return -1;
        }
        queue[q] = stack[j];
        queue_help[q] = 'o';
        q++;
    }
    uint8_t operators[16];
    int m = 0;
    for(int j=0;j<q;j++){
        details[j] = queue[j];
        if(queue_help[j] == 'o'){
            operators[m] = j;
            m++;
        }
    }
    i = 2;
    int k = 0;
    uint8_t temp = 0;
    if(m>0 && operators[0]<2){
        return -1;
    }
    while(1){
        if(q==1 || i>=q)
            break;
        if(i>1){
            if(k>=m)
                return -1;
            if(i == operators[k]){
                if(details[i]==10)
                    details[i-2] = details[i-2] + details[i-1];
                else if(details[i]==11)
                    details[i-2] = details[i-2] - details[i-1];
                else if(details[i]==12)
                    details[i-2] = details[i-2] * details[i-1];
                else{
                    if(details[i-1]==0)
                        return -1;
                    details[i-2] = details[i-2] / details[i-1];
                }
                i -= 2;
                shift_queue(i);
                k++;       
                for(int j=k;j<m;j++)
                    operators[j] -= 2;
            } else{
                 i++;
            }
        } else{
            i++;
        }
    }
//    while(1){
//        if(q==1 || i>=q)
//            break;
//        if(i>1){
//            if(details[i]==10 || details[i]==11 || details[i]==12 || details[i]==13){
//                if(details[i-1]<10 || details[i-2]<10){
//                    if(details[i]==10)
//                        details[i-2] = details[i-2] + details[i-1];
//                    else if(details[i]==11)
//                        details[i-2] = details[i-2] - details[i-1];
//                    else if(details[i]==12)
//                        details[i-2] = details[i-2] * details[i-1];
//                    else{
//                        if(details[i-1]==0)
//                            return -1;
//                        details[i-2] = details[i-2] / details[i-1];
//                    }
//                    i -= 2;
//                    shift_queue(i);
//                } else{
//                    LCDGoto(0,1);
//                    temp = '0'+q;
//                    LCDPutChar(temp);
//                    __delay_ms(1000);
//                    return -1;}
//            } else
//                i++;
//        } else
//            i++;
//    }

    if(q>1)
        return -1;
    if(k!=m)
        return -1;
    float result = details[0];
    //result = 18;
    result_len = 0;
    result_len_int = 0;
    if(result<0){
        result_array[16] = 1;
        result = -result;
    }
    else
        result_array[16] = 0;
    if(result==0){
        result_array[result_len] = 0;
        result_len++;
        result_len_int++;
    }
    int result_int = result;
    float result_float = result - result_int;
    while(result_int!=0){
        if(result_len==16)
            return -1;
        result_array[result_len] = result_int%10;
        result /= 10;
        result_len++;
        result_len_int++;
    }
    if(result_len >= 15 && result_float != 0)
        return 1;
    if(result_float == 0)
        return 1;
    while(result_float!=0){
        if(result_len == 16)
            return 1;
        result_float *= 10;
        result_array[result_len] = result_float;
        result_float -= result_array[result_len];
        result_len++;
    }
    
//    i = 0;
//    
//    for (int j=0;j<q;j++){
//        if(queue[j] == '+')
//            command[j] = '0.1';
//        //else if(queue[j]=='')
//    }
//    for (i=0;i<q;i++){
//        if(queue[i]=='+' || queue[i]=='-' || queue[i]=='/' || queue[i]=='*'){
//            //operand1 = queue[i-2] - '0';
//            //operand2 = queue[i-1] - '0';
//            
//        }
//        
//    }
    return 1;
}
//int8_t claculation(){
//    int8_t length = 0;
//    q = 0;
//    s = 0;
//    while(input[length]!= 'f'){
//        length++;
//    }
//
//    int i = 0;
//    while(i<length){
//        if(input_help[i]=='n'){
//            queue[q] = input[i];
//            q++;
//        } else if(input_help[i]=='o'){
//            while(s!=0 && stack[s-1]!='(' && precedence(input[i],stack[s-1])==0){
//                queue[q] = stack[s-1];
//                q++;
//                s--;
//            }
//            stack[s] = input[i];
//            s++;
//        } else if(input_help[i]=='('){
//            stack[s] = input[i];
//            s++;
//        } else if(input_help[i]==')'){
//            if(s>0){
//                while(stack[s-1]!='('){
//                    queue[q] = stack[s-1];
//                    q++;
//                    s--;
//                    if(s==0){
//                        return -1;
//                    }
//                }
//                s--;
//            } else
//                return -1;
//        }  
//        i++;
//    }
//    for (int j=s-1;j>=0;j--){
//        if(stack[j]=='(')
//            return -1;
//        queue[q] = stack[j];
//        q++;
//    }
//    i = 0;
//    
//    for (int j=0;j<q;j++){
//        if(queue[j] == '+')
//            command[j] = '0.1';
//        else if(queue[j]=='')
//    }
//    for (i=0;i<q;i++){
//        if(queue[i]=='+' || queue[i]=='-' || queue[i]=='/' || queue[i]=='*'){
//            operand1 = queue[i-2] - '0';
//            operand2 = queue[i-1] - '0';
//            
//        }
//        
//    }
//    return 1;
//}
//void 
///**
// End of File
//*/